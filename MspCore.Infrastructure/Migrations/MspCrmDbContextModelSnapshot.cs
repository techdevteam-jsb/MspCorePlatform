// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MspCore.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MspCore.Infrastructure.Migrations
{
    [DbContext(typeof(MspCrmDbContext))]
    partial class MspCrmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MspCore.Domain.Entities.Applications.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CmdbConfigurationItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CmdbConfigurationItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("Applications", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Clients.ClientAccount", b =>
                {
                    b.Property<Guid>("ClientAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ClientAccountId");

                    b.ToTable("ClientAccounts", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Clients.PortalUser", b =>
                {
                    b.Property<Guid>("PortalUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PortalUserId");

                    b.HasIndex("ClientAccountId");

                    b.ToTable("PortalUsers", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbBaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsMonitored")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CmdbBaseItems", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Contracts.ServiceContract", b =>
                {
                    b.Property<Guid>("ServiceContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CmdbClientItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CmdbCompanyItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ServiceContractId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("CmdbClientItemId");

                    b.HasIndex("CmdbCompanyItemId");

                    b.ToTable("ServiceContracts", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ClientAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProductId");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Support.Inquiry", b =>
                {
                    b.Property<Guid>("InquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CmdbClientItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("InquiryId");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("CmdbClientItemId");

                    b.ToTable("Inquiries", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Support.SupportCase", b =>
                {
                    b.Property<Guid>("SupportCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CmdbClientItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfigurationItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("SupportCaseId");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("CmdbClientItemId");

                    b.HasIndex("ConfigurationItemId");

                    b.ToTable("SupportCases", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", b =>
                {
                    b.HasBaseType("MspCore.Domain.Entities.Cmdb.CmdbBaseItem");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CostCenter")
                        .HasColumnType("text");

                    b.Property<string>("Criticality")
                        .HasColumnType("text");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastScanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LifecyclePhase")
                        .HasColumnType("text");

                    b.Property<string>("ManagedBy")
                        .HasColumnType("text");

                    b.Property<string>("OperationalStatus")
                        .HasColumnType("text");

                    b.Property<string>("Subcategory")
                        .HasColumnType("text");

                    b.Property<string>("SupportGroup")
                        .HasColumnType("text");

                    b.Property<string>("UsageType")
                        .HasColumnType("text");

                    b.ToTable("CmdbConfigurationItems", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbApplicationItem", b =>
                {
                    b.HasBaseType("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("BusinessOwner")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ClientItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("HostingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Platform")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceTier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupportStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TechnicalOwner")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasIndex("ClientItemId");

                    b.HasIndex("CompanyItemId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("CmdbApplicationItems", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbClientItem", b =>
                {
                    b.HasBaseType("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem");

                    b.Property<string>("AccountManager")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ClientStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("CmdbClientItems", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", b =>
                {
                    b.HasBaseType("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem");

                    b.Property<string>("BusinessStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CEOName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadquartersLocation")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("IndustryType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.ToTable("CmdbCompanyItems", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbProductItem", b =>
                {
                    b.HasBaseType("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Vendor")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WarrantyPeriod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("CmdbProductItems", "public");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Applications.Application", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", "Client")
                        .WithMany("Applications")
                        .HasForeignKey("ClientId");

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", "CmdbConfigurationItem")
                        .WithMany()
                        .HasForeignKey("CmdbConfigurationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Products.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId");

                    b.Navigation("Client");

                    b.Navigation("CmdbConfigurationItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Clients.PortalUser", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", "ClientAccount")
                        .WithMany("PortalUsers")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Contracts.ServiceContract", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Applications.Application", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", "ClientAccount")
                        .WithMany("ServiceContracts")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbClientItem", null)
                        .WithMany("ServiceContracts")
                        .HasForeignKey("CmdbClientItemId");

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", null)
                        .WithMany("ServiceContracts")
                        .HasForeignKey("CmdbCompanyItemId");

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", null)
                        .WithMany("Products")
                        .HasForeignKey("ClientAccountId");

                    b.HasOne("MspCore.Domain.Entities.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Support.Inquiry", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", "ClientAccount")
                        .WithMany("Inquiries")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbClientItem", null)
                        .WithMany("Inquiries")
                        .HasForeignKey("CmdbClientItemId");

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Support.SupportCase", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Clients.ClientAccount", "ClientAccount")
                        .WithMany("SupportCases")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbClientItem", null)
                        .WithMany("SupportCases")
                        .HasForeignKey("CmdbClientItemId");

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", "ConfigurationItem")
                        .WithMany()
                        .HasForeignKey("ConfigurationItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ClientAccount");

                    b.Navigation("ConfigurationItem");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbBaseItem", null)
                        .WithOne()
                        .HasForeignKey("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbApplicationItem", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbClientItem", "Client")
                        .WithMany("Applications")
                        .HasForeignKey("ClientItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", "Company")
                        .WithMany("Applications")
                        .HasForeignKey("CompanyItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", null)
                        .WithOne()
                        .HasForeignKey("MspCore.Domain.Entities.Cmdb.CmdbApplicationItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbProductItem", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbClientItem", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", null)
                        .WithOne()
                        .HasForeignKey("MspCore.Domain.Entities.Cmdb.CmdbClientItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", null)
                        .WithOne()
                        .HasForeignKey("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbProductItem", b =>
                {
                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbClientItem", "Client")
                        .WithMany("Products")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Cmdb.CmdbConfigurationItem", null)
                        .WithOne()
                        .HasForeignKey("MspCore.Domain.Entities.Cmdb.CmdbProductItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MspCore.Domain.Entities.Products.Product", null)
                        .WithMany("InstallBaseItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Applications.Application", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Clients.ClientAccount", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Inquiries");

                    b.Navigation("PortalUsers");

                    b.Navigation("Products");

                    b.Navigation("ServiceContracts");

                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("InstallBaseItems");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbClientItem", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Inquiries");

                    b.Navigation("Products");

                    b.Navigation("ServiceContracts");

                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbCompanyItem", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Products");

                    b.Navigation("ServiceContracts");
                });

            modelBuilder.Entity("MspCore.Domain.Entities.Cmdb.CmdbProductItem", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
